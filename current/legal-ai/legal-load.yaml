input:
  file:
    paths: [ ./court_cases/*.txt ]
    scanner:
      to_the_end: {}
pipeline:
  processors:
    - log:
        message: ${! meta() }
    - mapping: |
              meta id = meta("path").string().trim_prefix("court_cases/")
              meta text = content().string()
    - openai_chat_completion:
        server_address: https://api.openai.com/v1
        api_key: ${OPENAI_API_KEY}
        model: gpt-4o
        system_prompt: |
          Summarize the following court case in 3 sentences: 
    - mapping: |
        root.id = meta("id")
        root.text = meta("text")
        root.summary = content().string()
    - log:
        message: \${! json() }
output:
  kafka_franz:
    seed_brokers:
      -  ${RP_BOOTSTRAP_SERVER}
    topic: legal_cases
    compression: none
    key: ${! json("id") }
    tls:
      enabled: true
    sasl:
      - mechanism: ${RP_SASL_MECHANISM}
        username: ${RP_USER_USERNAME}
        password: ${RP_USER_PASSWORD}

